
import numpy as np


class FDTD:

    def __init__(self, shape):
        self.shape = shape

        self._cn = 5**-.5

        self.E_init = np.zeros(shape + (4,))
        self.H_init = np.zeros(shape + (4,))
        self.BCs = []

    def run(self, steps):
        self.E = np.zeros((steps + 1,) + self.shape + (4,))
        self.H = np.zeros((steps + 1,) + self.shape + (4,))
        self.E[0] += self.E_init
        self.H[0] += self.H_init
        for t in range(steps):
            for BC in self.BCs:
                BC.pre_update_E(self.H[t])
            self.E[t + 1] = self.E[t] + self._cn * self.dE(self.H[t])
            for BC in self.BCs:
                self.E[t + 1] = BC.post_update_E(self.E[t + 1])
            for BC in self.BCs:
                BC.pre_update_H(self.E[t + 1])
            self.H[t + 1] = self.H[t] + self._cn * self.dH(self.E[t + 1])
            for BC in self.BCs:
                self.H[t + 1] = BC.post_update_H(self.H[t + 1])
        return self.E, self.H

    def add_BC(self, BC):
        BC.init(self)
        self.BCs.append(BC)

    def dE(self, H):
        d = np.zeros(H.shape)
        d[1:, :, :, :, 0] -= H[1:, :, :, :, 3] - H[:-1, :, :, :, 3]
        d[:, 1:, :, :, 0] += H[:, 1:, :, :, 2] - H[:, :-1, :, :, 2]
        d[:, :, 1:, :, 0] -= H[:, :, 1:, :, 1] - H[:, :, :-1, :, 1]
        d[:, :, :, 1:, 0] -= H[:, :, :, 1:, 0] - H[:, :, :, :-1, 0]
        d[1:, :, :, :, 1] -= H[1:, :, :, :, 2] - H[:-1, :, :, :, 2]
        d[:, 1:, :, :, 1] -= H[:, 1:, :, :, 3] - H[:, :-1, :, :, 3]
        d[:, :, 1:, :, 1] += H[:, :, 1:, :, 0] - H[:, :, :-1, :, 0]
        d[:, :, :, 1:, 1] -= H[:, :, :, 1:, 1] - H[:, :, :, :-1, 1]
        d[1:, :, :, :, 2] += H[1:, :, :, :, 1] - H[:-1, :, :, :, 1]
        d[:, 1:, :, :, 2] -= H[:, 1:, :, :, 0] - H[:, :-1, :, :, 0]
        d[:, :, 1:, :, 2] -= H[:, :, 1:, :, 3] - H[:, :, :-1, :, 3]
        d[:, :, :, 1:, 2] -= H[:, :, :, 1:, 2] - H[:, :, :, :-1, 2]
        d[1:, :, :, :, 3] += H[1:, :, :, :, 0] - H[:-1, :, :, :, 0]
        d[:, 1:, :, :, 3] += H[:, 1:, :, :, 1] - H[:, :-1, :, :, 1]
        d[:, :, 1:, :, 3] += H[:, :, 1:, :, 2] - H[:, :, :-1, :, 2]
        d[:, :, :, 1:, 3] -= H[:, :, :, 1:, 3] - H[:, :, :, :-1, 3]
        return d

    def dH(self, E):
        d = np.zeros(E.shape)
        d[:-1, :, :, :, 0] += E[1:, :, :, :, 3] - E[:-1, :, :, :, 3]
        d[:, :-1, :, :, 0] -= E[:, 1:, :, :, 2] - E[:, :-1, :, :, 2]
        d[:, :, :-1, :, 0] += E[:, :, 1:, :, 1] - E[:, :, :-1, :, 1]
        d[:, :, :, :-1, 0] -= E[:, :, :, 1:, 0] - E[:, :, :, :-1, 0]
        d[:-1, :, :, :, 1] += E[1:, :, :, :, 2] - E[:-1, :, :, :, 2]
        d[:, :-1, :, :, 1] += E[:, 1:, :, :, 3] - E[:, :-1, :, :, 3]
        d[:, :, :-1, :, 1] -= E[:, :, 1:, :, 0] - E[:, :, :-1, :, 0]
        d[:, :, :, :-1, 1] -= E[:, :, :, 1:, 1] - E[:, :, :, :-1, 1]
        d[:-1, :, :, :, 2] -= E[1:, :, :, :, 1] - E[:-1, :, :, :, 1]
        d[:, :-1, :, :, 2] += E[:, 1:, :, :, 0] - E[:, :-1, :, :, 0]
        d[:, :, :-1, :, 2] += E[:, :, 1:, :, 3] - E[:, :, :-1, :, 3]
        d[:, :, :, :-1, 2] -= E[:, :, :, 1:, 2] - E[:, :, :, :-1, 2]
        d[:-1, :, :, :, 3] -= E[1:, :, :, :, 0] - E[:-1, :, :, :, 0]
        d[:, :-1, :, :, 3] -= E[:, 1:, :, :, 1] - E[:, :-1, :, :, 1]
        d[:, :, :-1, :, 3] -= E[:, :, 1:, :, 2] - E[:, :, :-1, :, 2]
        d[:, :, :, :-1, 3] -= E[:, :, :, 1:, 3] - E[:, :, :, :-1, 3]
        return d
